{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","winner","this","setState","i","slice","lines","length","a","b","c","calculateWinner","handleClick","status","renderSquare","resetGame","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gNAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,SAASC,EAAOC,GAEZ,OACE,4BACEC,UAAU,SACVC,QAAS,kBAAKF,EAAME,YAEjBF,EAAMG,O,IAKXC,E,kDACJ,WAAYJ,GAAO,IAAD,8BAChB,cAAMA,IACDK,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,EACTC,QAAQ,GALM,E,wDAUhB,IAAIJ,EAAUC,MAAM,GAAGC,KAAK,MAG5BG,KAAKC,SAAS,CAACN,QAASA,EAASG,SAFnB,EAEqCC,QADtC,M,kCAIHG,GACV,IAAMP,EAAUK,KAAKN,MAAMC,QAAQQ,QACnC,IAAKH,KAAKN,MAAMK,OAAQ,CACtBJ,EAAQO,GAAKF,KAAKN,MAAMI,QAAU,IAAM,IAExC,IAAMC,EAiGZ,SAAyBJ,GAWvB,IAVA,IAAMS,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAF,EAAI,EAAGA,EAAIE,EAAMC,OAAQH,IAAK,CAAC,IAAD,cACnBE,EAAMF,GADa,GAC9BI,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIb,EAAQW,IAAMX,EAAQW,KAAOX,EAAQY,IAAMZ,EAAQW,KAAOX,EAAQa,GACpE,OAAOb,EAAQW,GAGnB,OAAO,KAlHYG,CAAgBd,GAC/BK,KAAKC,SAAS,CACZN,QAASA,EACTG,SAAUE,KAAKN,MAAMI,QACrBC,OAAQA,O,mCAKDG,GAAI,IAAD,OACd,OAAO,kBAACd,EAAD,CACLI,MAAOQ,KAAKN,MAAMC,QAAQO,GAC1BX,QAAS,kBAAM,EAAKmB,YAAYR,Q,+BAI1B,IAAD,OAEHS,EAAS,GAOb,OALEA,EADEX,KAAKN,MAAMK,OACJ,YAAcC,KAAKN,MAAMK,OAEzB,gBAAkBC,KAAKN,MAAMI,QAAU,IAAM,KAItD,6BACE,yBAAKR,UAAU,UACZqB,GAEH,yBAAKrB,UAAU,SACf,yBAAKA,UAAU,aACZU,KAAKY,aAAa,GAClBZ,KAAKY,aAAa,GAClBZ,KAAKY,aAAa,IAErB,yBAAKtB,UAAU,aACZU,KAAKY,aAAa,GAClBZ,KAAKY,aAAa,GAClBZ,KAAKY,aAAa,IAErB,yBAAKtB,UAAU,aACZU,KAAKY,aAAa,GAClBZ,KAAKY,aAAa,GAClBZ,KAAKY,aAAa,KAIrB,yBAAKtB,UAAU,SACb,4BAAQA,UAAU,UAAUC,QAAS,kBAAM,EAAKsB,cAAhD,oB,GAvEUC,IAAMC,WAkFPD,IAAMC,UAsBzBC,IAASC,OAGL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fab21589.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Square(props){\n  \n    return (\n      <button \n        className='square' \n        onClick={()=> props.onClick()}\n      >\n          {props.value}\n      </button>\n    );\n}\n\nclass Board extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n      xIsNext: true,\n      winner: false\n    }\n  }\n\n  resetGame() {\n    let squares = Array(9).fill(null);\n    let xIsNext = true;\n    let winner = false;\n    this.setState({squares: squares, xIsNext: xIsNext, winner: winner})\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (!this.state.winner) {\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\n      \n      const winner = calculateWinner(squares);\n      this.setState({\n        squares: squares,\n        xIsNext: !this.state.xIsNext,\n        winner: winner\n      });\n    }\n  }\n\n  renderSquare(i) {\n    return <Square \n      value={this.state.squares[i]}\n      onClick={() => this.handleClick(i)}\n      />;\n  }\n\n  render() {\n    \n    let status = '';\n    if (this.state.winner) {\n      status = 'Winner : ' + this.state.winner;\n    } else {\n      status = 'Next Player:' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return(\n      <div>\n        <div className='Status'>\n          {status}\n        </div>\n        <div className='board'>\n        <div className='board-row'>\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className='board-row'>\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className='board-row'>\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n        </div>\n\n        <div className='reset'>\n          <button className='b_reset' onClick={() => this.resetGame()}>\n            Reset Game\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\n\n\nclass Game extends React.Component {\n  // constructor(){\n  //   super(props);\n  //   this.state = {};\n  // }\n\n  renderBoard(params) {\n    return <Board />;\n  }\n\n  render(){\n    return (\n      <div className='game'>\n        <div className='board'>\n          <Board />\n        </div>\n      </div>\n      \n    )\n  }\n}\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n    <Board />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}"],"sourceRoot":""}